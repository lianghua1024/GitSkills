【puppet资源定义】
puppet describe -l查看所有支持的资源
type {'title':
	attribute1 	=> value1,
	atrribute2	=> value2,
    ……
}

【user资源】
user{'lianghua':
    name => lianghua,    #name属性可以省略，采用type的名字
    ensure => present,    #present/absent（可以理解删除用户）,stopped/running
    uid => 700,
    gid => 777,
    group => [    #附属组，可以指定多个附属组，附属组必须事先存在，不能包含gid对应的组名
        wrsroot,
        root,
        ],
    managehome => True,    #自动创建家目录
    password => 'dsfefdfefdfefdsffdsafgdrfdsfef'    #我随便敲的一段乱码，如果密码使用md5的方式加密grub-md5-crypt命令
    如果你的密码使用sha256的方式加密，可以使用perl -e 'print crype("password",q($6$salt$)),"\n";'
    home => '/home/lianghua',    #家目录，puppet不会自动创建这个目录的，如果要在创建用户时自动为我们创建用户的家目录，需要使用managehome属性
    shell => '/bin/bash',    #指定用户的默认登录shell类型
    comment => 'www.lianghua.net',
    expire => '2016-12-12'
    #system => True    #这一行已经被注释掉了，在执行清单时，被注释的属性不会被执行。
}

puppet apply --verbose learnpuppet.pp

【group资源】
group{"lianghua":    #name属性，可省
    ensure => present,    #必须存在，并且目标状态与我们定义的相同
    gid => 666,    #组id
    system => false,    #指定当前组是否为系统组，默认为false，当显示指定system属性并且设置为true时，则为系统组。
}

【cron资源】：管理目标服务器上的定时任务，作用相当于crontab命令。
corn{'corn_name':
    #name => corn_name,    #任务名称，可省
    #ensure => absent,    #表示创建或删除指定任务，可省，默认值present，表示对应定时任务必须存在且与定义状态完全一致。
    command => '/bin/cat /testdir/test.sh >> /testdir/lianghua.net',    #指定定时任务需要执行的程序
    user => root,    #指定当前任务是为哪个用户设定的
    minute => '*/1',    #指定定时任务的分钟时间格式，例子表示每1分钟，省略不写默认为"*".
    #hour => *,
    #monthday => *,
    #month => *，
    #weekday => *，
}

【packet资源】：管理目标服务器上的程序包
package{'tree':    #name属性省略的情况下，title就是name.
    ensure => installed,    #对于packet资源来说，可以使用absent（卸载）/present（安装）/installed（安装）/latest（获取最新版本）
    #provider => rpm,    #当puppet默认的provider不符合我们的实际使用场景时，可以指定使用哪种provider
    #source => '/testdir/tree-1.5.3-3.e16.x86_64.rpm',    #指定安装包文件，如果被管理服务器上存在类似yum源这样的provider，则可以省略此属性
    省略此属性后，yum源会按照name属性或title的名字自动安装对应的package，如果对应被管理服务器上没有类似yum源这样的provider，那么source属性是必须的
    
}

【service资源】启动或停止目标服务器上的服务。
service{'nginx':
    ensure => running,    #表示当前服务的状态running表示运行，stopped表示停止对应服务。
    enable => true,    #trun表示开机自启动，false表示不会开机自启动
    start => '/usr/sbin/nginx',    #用户手动指定服务对应的启动命令
    restart => '/usr/sbin/nginx -t && /usr/sbin/nginx -s reload',    #手动指定的restart操作对应的命令，但是为了保险起见，通常会将此属性对应的命令设置为reload
}

【file资源】管理文件的内容/属主组以及文件的权限，同时还可以用它管理目录、链接文件
#创建一个文件，被创建的文件夹为/testdir/zsyfile，文件内容为content属性对应的值
file{'lianghuafile':
    path => '/testdir/zsyfile',
    ensure => file,
    content => "www.lianghuathink.net\n",
}

#复制/etc/fstab文件中的内容到/testdir/lianghuafile文件中，
#并且设置lianghuafile文件的属主数组均为lianghuathink，文件权限为600
file{'/testdir/lianghuafile1':
    ensure => present,
    source => '/etc/fstab',
    owner => lianghuathink,
    group => lianghuathink,
    mode => 0600,
}

#复制/testdir/abc目录中的所有内容到/testdir/dir目录下
file{'/testdir/dir':
    ensure => directory,
    source => '/testdir/abc',
    recurse => true,
}

#注意file资源不会自动创建目录，上述三个例子中，/testdir目录已经事先存在
#使用如下方法，可以手动的一次将目录创建出来，但是这种方法比较笨拙。
#下面，使用"[]"中的内容作为title，表示按照顺序创建多个目录
#也可以不适用如下方法，而是借助exec资源完成
file{["/testdir/www",
    "/testdir/www/lianghuathink",
    "/testdir/www/lianghuathink/net",
    ]:
    ensure => directory,
}

#删除对应的目录，以及目录中的所有内容。
file{"/testdir/dd":
    ensure => absent,
    force => true,
}

#创建一个连接文件/testdir/lianghualink，连接指向/etc/fstab文件
file{"/testdir/lianghualink":
    ensure => link,
    target => "/etc/fstab",
}

#path属性：通过此属性指定file资源所在路径，可省略，此时path属性对应的值与file资源的title相同。
#ensure属性：present/absent（删除对应资源）/file(文件)/directory（代表目录）/link（软链接）
#content属性：当ensure属性值为file时，使用此属性可以指定文件的内容，将要写入的文件内容使用引号引起即可，
也可以指定内容替换为变量的值，此属性与source属性不能同时存在于同一个资源中。
#source属性：当ensure为file时，使用此属性可以指定当前文件的内容从哪个文件中获取，使用source属性，还可以
通过指定的puppet url远程复制文件。source属性与content属性本质上都是设置文件内容的，他们不能同时存在于同一个资源中
当ensure为directory时，使用source属性的同时，需要配合recure属性，否则被复制目录中的子目录或者文件将不会被同时复制过来
#recurse属性：此属性用于设置被操作源目录是否被递归，当ensure属性的值为directory时，同时source属性对应的
值为一个目录，那么需要将recurse属性设置为true，被复制目录中的子目录和文件才能被复制到当前目录中。
注意，recurse属性只有在配合source属性时才会递归的复制目录。
#force属性：当ensure属性的值设置为absent时，同时file资源对应的path或者title为一个目录，那么必须将fore值
置为true，才能删除对应目录以及目录下的文件，当file资源对应的path为一个文件，则不需要设置force属性，可以删除文件。
#target属性：当ensure的值为link时，需要通过target属性指定连接的目标文件。
#owner属性：指定file资源对应的属主。
#group属性：指定file资源对应的属组。
#mode属性：指定file资源对应的权限。
#backup属性：使用此属性结合filebucket资源可以实现文件备份

【exec资源】：在被管理服务器上执行对应命令。
exec{'mklhdir':
    path => "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin",
    #path => ["/usr/local/sbin","/usr/local/bin","/sbin","/bin","/usr/sbin","/usr/bin","/root/bin],
    onlyif => 'test -e /etc/fstab',
    #onlyif => '/usr/bin/test -e /etc/fstab',
    command => 'mkdir -p /testdir/lhdir/www/lhthink/net',
    #command => '/bin/mkdir -p /testdir/lhdir/www/lhthink/net'
}
上述资源表示，当‘/etc/fstab’文件存在时，在被管理服务器上执行创建文件夹的命令。
#path属性：此属性类似PATH环境变量。
#command属性：指定将要执行的命令
#cwd属性：执行命令的目录
#user属性：以哪个用户的身份运行对应命令
#group属性：以哪个组的身份运行对应的命令
#onlyif属性：表示“运行条件”，当onlyif属性对应的命令运行成功时，才会执行command属性对一个的命令。当onlyif语句返回值为'0'时才会执行command语句
#refreshonly属性：仅接收到订阅资源的通知时，才执行对应的命令，一般与subscribe配合，此属性可以设置为true或者false，这个属性牵扯到puppet调用资源的顺序。

【yumrepo资源】：在被管理服务器上设置对应的yum源。
yumrepo{'aliyum68':
    #name => "aliyumCentos68",
    baseurl => "http://mirrors.aliyun.com/centos/6.8/os/x86_64/",
    gpgcheck => 0,
    #gpgkey => "http://mirrors.aliyun.com/centos/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6",
    enable => 1,
}

#name属性：可省，表示yum文件的名称与yum源的名称
#baseurl属性：设置yun源的url，与yum的配置没有任何区别
gpgcheck属性：是否开启gpg检查，0表示不检查。
gpgkey属性：当启动gpgcheck时对应的key
enable属性：是否启动这个yum源，1表示启动，0表示不启动

【元参数】：before/require/notify/subscribe
引用语法：Type['resource name']
user{"lhthink":
    ensure => present,
    gid => 888,
    managehome => true,
}

group{"linuxgroup"
    ensure => present,
    gid => 888,
    before => User['lhthink'],    #或者在user资源中加require => Group['linuxgroup']
}

--------------------------------------------------------------------------------------------------------------------
file{"nginxconf":
    path => '/etc/nginx/conf.d/default.conf',
    ensure => present,
    source => '/template/default.conf',
}

exec{"nginxreload":
    command => "/usr/sbin/nginx -s reload",
    subscribe => File["nginxconf"],    #订阅file资源，当有变化时会收到通知
    refreshonly => true,
}

【通知链】：不需要使用notify/subscribe这两个属性，实现订阅通知的功能
语法：File['nginxconf'] ~> Exec['nginxreload']

【次序链】：不使用before/require实现资源先后顺序
语法：Package['httpd'] -> File['httpdconf'] -> Service['httpdsrv']