linux 大学网：
https://www.linuxdaxue.com/linux-shell-serial-course.html


linux中shell变量$#,$@,$0,$1,$2的含义解释: 
变量说明: 
$$ 
Shell本身的PID（ProcessID）
 
$! 
Shell最后运行的后台Process的PID 

$? 
最后运行的命令的结束代码（返回值） 

$- 
使用Set命令设定的Flag一览 

$* 
所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
 
$@ 
所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
 
$# 
添加到Shell的参数个数 

$0 
Shell本身的文件名 

$1～$n 
添加到Shell的各参数值。$1是第1参数、$2是第2参数…。 

【shell脚本中大于，大于等于，小于，小于等于、不等于的表示方法】
大于 -gt       (greater than) 
小于 -lt      (less than) 
大于或等于 -ge      (greater than or equal) 
小于或等于 -le        (less than or equal) 
不相等 -ne    （not equal）


#!/bin/sh -e
这个-e参数，以前没见过，在网上百度了下，原来-e的参数的作用是：
每条指令之后后，都可以用#？去判断他的返回值，零就是正确执行，非零就是执行有误,
加了-e之后，就不用自己写代码去判断返回值，返回非零，脚本就会退出。

【统计一个字符串在文中出现的次数】
:m,ns/\<字符串\>//gn
cat file | grep -i 字符串 | wc -l

【grep】
  -a或--text   不要忽略二进制的数据。
  -A<显示列数>或--after-context=<显示列数>   除了显示符合范本样式的那一列之外，并显示该列之后的内容。
  -b或--byte-offset   在显示符合范本样式的那一列之前，标示出该列第一个字符的位编号。
  -B<显示列数>或--before-context=<显示列数>   除了显示符合范本样式的那一列之外，并显示该列之前的内容。
  -c或--count   计算符合范本样式的列数。
  -C<显示列数>或--context=<显示列数>或-<显示列数>   除了显示符合范本样式的那一列之外，并显示该列之前后的内容。
  -d<进行动作>或--directories=<进行动作>   当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。
  -e<范本样式>或--regexp=<范本样式>   指定字符串做为查找文件内容的范本样式。
  -E或--extended-regexp   将范本样式为延伸的普通表示法来使用。
  -f<范本文件>或--file=<范本文件>   指定范本文件，其内容含有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每列一个范本样式。
  -F或--fixed-regexp   将范本样式视为固定字符串的列表。
  -G或--basic-regexp   将范本样式视为普通的表示法来使用。
  -h或--no-filename   在显示符合范本样式的那一列之前，不标示该列所属的文件名称。
  -H或--with-filename   在显示符合范本样式的那一列之前，表示该列所属的文件名称。
  -i或--ignore-case   忽略字符大小写的差别。
  -l或--file-with-matches   列出文件内容符合指定的范本样式的文件名称。
  -L或--files-without-match   列出文件内容不符合指定的范本样式的文件名称。
  -n或--line-number   在显示符合范本样式的那一列之前，标示出该列的列数编号。
  -q或--quiet或--silent   不显示任何信息。
  -r或--recursive   此参数的效果和指定“-d recurse”参数相同。
  -s或--no-messages   不显示错误信息。
  -v或--revert-match   反转查找。
  -V或--version   显示版本信息。
  -w或--word-regexp   只显示全字符合的列。
  -x或--line-regexp   只显示全列符合的列。
  -y   此参数的效果和指定“-i”参数相同。
  --help   在线帮助。
  
【vim 查找替换】
vi/vim 中可以使用 :s 命令来替换字符串
:s/vivian/sky/ 替换当前行第一个 vivian 为 sky
:s/vivian/sky/g 替换当前行所有 vivian 为 sky
:n,ms/vivian/sky/g 替换当前文件中n-m行的所有vivian 为 sky

:10,15g/^/s//\/\// 在10到15行的行首插入//


从上可知 shift(shift 1) 命令每执行一次，变量的个数($#)减一（之前的$1变量被销毁,之后的$2就变成了$1），而变量值提前一位。

case工作方式如上所示。取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。
匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。
;; 与其他语言中的 break 类似，意思是跳到整个 case 语句的最后,
取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。


shell 的风格，用倒序的字母单词和 正序的单词配对。
比如 if 语句， 结束时用 fi 来配对
esac是和case配对的，是多路分支的语句

sed是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。
处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。
a\ 在当前行下面插入文本。
i\ 在当前行上面插入文本。
c\ 把选定的行改为新的文本。
d 删除，删除选择的行。
D 删除模板块的第一行。
s 替换指定字符
h 拷贝模板块的内容到内存中的缓冲区。
H 追加模板块的内容到内存中的缓冲区。
g 获得内存缓冲区的内容，并替代当前模板块中的文本。
G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
l 列表不能打印字符的清单。
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
p 打印模板块的行。
P(大写) 打印模板块的第一行。
q 退出Sed。
b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
r file 从file中读行。
t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file 写并追加模板块到file末尾。  
W file 写并追加模板块的第一行到file末尾。  
! 表示后面的命令对所有没有被选定的行发生作用。  
= 打印当前行号码。  
# 把注释扩展到下一个换行符以前。  

撤销：u
恢复撤销：Ctrl + r





删除空白行：sed '/^$/d' file
直接编辑文件选项-i
删除文件的第2行：sed '2d' file
删除文件的第2行到末尾所有行：sed '2,$d' file
删除文件最后一行：sed '$d' file

正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之前所匹配到的单词：
echo this is a test line | sed 's/\w\+/[&]/g'
[this] [is] [a] [test] [line]

eval命令将会首先扫描命令行进行所有的替换，然后再执行命令
test.txt内容：hello shell world!
myfile="cat test.txt"
(1)echo $myfile　　#result:cat test.txt
(2)eval echo $myfile　　#result:hello shell world!

head 与 tail 就像它的名字一样的浅显易懂，它是用来显示开头或结尾某个数量的文字区块，
head 用来显示档案的开头至标准输出中
tail 想当然尔就是看档案的结尾，看看下面的范例：
## (1)
displays the first 6 lines of a file
head -6 readme.txt
## (2)
displays the last 25 lines of a file
tail -25 mail.txt
范例一是显示档案的前 6 行，范例二则是显示档案最后的 25 行。
而下面的范别，结合 了 head 与 tail 的指令，显示档案的第 11 行到第 20 行
#head与tail一套组合拳：
head -n 10030 application.log | tail -n +10000 #数字前面有个+号就不是从后往前了
输出application.log的10000行至10030行内容


xshell5下 linux终端中常用的快捷键
CTRL + ALT + T: 打开终端
CTRL + D: 关闭标签页==logout
CTRL + L: 清楚屏幕==clear命令
CTRL + A: 移动到行首
CTRL + E: 移动到行末
CTRL + C: 终止当前任务
复制：Ctrl+Insert
粘贴：Shift+Insert


getopt.getopt(args, shortopts, longopts=[])
args指的是当前脚本接收的参数，它是一个列表，可以通过sys.argv获得
shortopts 是短参数　　啥是短参数啊？　　类似于　这样：python test.py -h # 输出帮助信息
longopts  是长参数　　啥是长参数啊？　　类似于　这样：python test.py -help # 输出帮助信息
这个函数返回是一个两元组的列表（复习一下，元组的值是不可修改的！）
举个例子：
---------------------------------------------------------------------------------------
#!/usr/bin/env python3.5
import urllib.request
import getopt
import sys

opts,args = getopt.getopt(sys.argv[1:],'-h-f:-v',['help','filename=','version'])
for opt_name,opt_value in opts:
    if opt_name in ('-h','--help'):
        print("[*] Help info")
        exit()
    if opt_name in ('-v','--version'):
        print("[*] Version is 0.01 ")
        exit()
    if opt_name in ('-f','--filename'):
        fileName = opt_value
        print("[*] Filename is ",fileName)
        # do something
        exit()
--------------------------------------------------------------------------------------
来详细解释一下这几行代码
首先从短参数名开始。
我定义了'-h-f:-v' 大家发现没有，在-f后面多了一个":"
这个":"代表了当前参数是有值的，是一个参数名+参数值的参数
如果我再加一个-o: 那么证明-o后面是可以接收一个值，这个值就是-o的参数值，将会保存到opts变量中。
长参数名的方式和短参数差不多，唯一的区别就是长参数如果要接收值，那必须得在后面加上一个"="
短参数使用的时候是参数名[空格]参数值
长参数使用的时候是参数名=参数值

-----------------------------------------------------------------------------------------------------------------------
&& 运算符:
格式:
command1  && command2
&&左边的命令（命令1）返回真(即返回0，成功被执行）后，&&右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功&&那么执行这个命令”。
命令之间使用 && 连接，实现逻辑与的功能，只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行

|| 运算符:
格式:
command1 || command2
||则与&&相反。如果||左边的命令（command1）未执行成功，那么就执行||右边的命令（command2）；或者换句话说，“如果这个命令执行失败了||那么就执行这个命令。
只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行

() 运算符:
如果希望把几个命令合在一起执行，shell提供了两种方法。既可以在当前shell也可以在子shell中执行一组命令。
格式:
(command1;command2;command3....)  多个命令之间用;分隔

{} 运算符:
如果使用{}来代替()，那么相应的命令将在子shell而不是当前shell中作为一个整体被执行，只有在{}中所有命令的输出作为一个整体被重定向时，其中的命令才被放到子shell中执行，否则在当前shell执行。
它的一般形式为：
{ command1;command2;command3… }  注意：在使用{}时，{}与命令之间必须使用一个空格


1.重定向：
echo "ABCD"  > temp.txt  将ABCD写入到temp.txt中
echo "ABCD" >> temp.txt  将ABCD追加到temp.txt中
我们在使用重定向时会发现一个问题，输出被重定向到文件后，在终端就看不到打印了。
如何既重定向又同时终端打印呢？？
2.这个时候就用到命令  tee
echo "ABCD" | tee temp.txt  将输出内容"ABCD"重定向到 temp.txt 同时在终端打印输出
echo "ABCD" | tee temp.txt temp02.txt  将输出内容"ABCD"同时重定向到 temp.txt 和 temp02.txt 并且在终端打印输出
echo -n "Enter your name:"   //参数-n的作用是不换行，echo默认是换行
echo "\"It is a test\""   //输出："It is a test"
=============================================================================================
                能否引用变量  |  能否引用转移符   |  能否引用文本格式符(如：换行符、制表符)

单引号  |        否           |        否         |        否
                                               
双引号  |        能           |        能         |        能
                                               
无引号  |        能           |        能         |        否                          
=============================================================================================


awk:一个报告生成器，它拥有强大的文本格式化能力。
我们现在在linux中所使用的awk其实是gawk，也就是GNU awk，简称gawk。awk还有一个版本，New awk，简称为nawk，但是linux中最常用的还是gawk

grep、sed、awk被称为linux中的“三剑客”。
grep：更适合单纯的查找或匹配文本
sed：更适合编译匹配到的文本
awk：更适合格式化文本，对文本进行较复杂格式处理

awk是逐行处理的，逐行处理的意思就是说，当awk处理一个文本时，会一行一行进行处理，处理完当前行在处理下一行，awk默认以“换行符”为标记，识别每一行，
也就是说，awk跟我们人类一样，每次遇到“回车换行”，就认为当前行的结束，新的一行开始，awk会按照用户指定的分隔符去分割当前行，如果没有指定分隔符，
就默认使用空格作为分隔符。

$0：表示整行
$NF：表示当前行分割后的最后一列
（注意：$NF和NF要表达的意思是不一样的，对于awk来说，$NF表示最后一个字段，NF表示当前行被分隔符切开以后，一共有几个字段）



netstat介绍：https://www.cnblogs.com/echo1937/p/6677325.html

从整体上看，netstat的输出结果可以分为两个部分：
一个是Active Internet connections，称为有源TCP连接，其中"Recv-Q"和"Send-Q"指的是接收队列和发送队列，这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积，这种情况非常少见。
另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。

常用参数：
-a (all)显示所有选项，netstat默认不显示LISTEN相关
-t (tcp)仅显示tcp相关选项
-u (udp)仅显示udp相关选项
-n 拒绝显示别名，能显示数字的全部转化成数字。(重要)
-l 仅列出有在 Listen (监听) 的服務状态
-p 显示建立相关链接的程序名(macOS中表示协议 -p protocol)
-r 显示路由信息，路由表
-e 显示扩展信息，例如uid等
-s 按各个协议进行统计 (重要)
-c 每隔一个固定时间，执行该netstat命令。

例如：
找出运行在指定端口的进程：netstat -an | grep ':22'


if 使用的表达式[]

Primary 意义
[ -a 文件 ] 如果文件存在为真。
[ -b 文件 ] 如果 文件 存在 而且 是一个 块-特殊 文件为真。
[ -c 文件 ] 为真 如果 文件 存在 而且 是一个 字-特殊 文件。
 

[ -d 文件 ] 为真 如果 文件 存在 而且 是一个 目录。
[ -e 文件 ] 为真 如果 文件 存在。
[ -f 文件 ] 为真 如果 文件 存在 而且 是一个 普通 文件。
[ -g 文件 ] 为真 如果 文件 存在 而且 已经设置了他的 SGID 位。
[ -h 文件 ] 为真 如果 文件 存在 而且 是一个 符号连接。
[ -k 文件 ] 为真 如果 文件 存在 而且 他的粘住位已经设置。
[ -p 文件 ] 为真 如果 文件 存在 而且 是一个 已经命名的管道 (F 如果O)。
[ -r 文件 ] 为真 如果 文件 存在 而且 是可读的。
[ -s 文件 ] 为真 如果 文件 存在 而且 比零字节大。
[ -t FD ] 为真 如果 文件 文件描述符已经打开 而且 指向一个终端。
[ -u 文件 ] 为真 如果 文件 存在 而且 已经设置了他的 SUID (set user ID)位。
[ -w 文件 ] 为真 如果 文件 为真 如果 文件 存在 而且 是可写的。
[ -x 文件 ] 为真 如果 文件 存在 而且 是可执行的。
[ -O 文件 ] 为真 如果 文件 存在 而且 属于有效用户ID。
[ -G 文件 ] 为真 如果 文件 存在 而且 属于有效组ID。
[ -L 文件 ] 为真 如果 文件 存在 而且 是一个 符号连接。
[ -N 文件 ] 为真 如果 文件 存在 而且 has been mod 如果ied since it was last read。
[ -S 文件 ] 为真 如果 文件 存在 而且 是一个 socket。
[ 文件1 -nt 文件2 ] 为真 如果 文件1 has been changed more recently than 文件2, or 如果
文件1 存在 而且
文件2 does not。
[ 文件1 -ot 文件2 ] 为真 如果 文件1 比 文件2 旧, 或者 文件2 存在而且 文件1 不存在。
[ 文件1 -ef 文件2 ] 为真 如果 文件1 而且 文件2 refer to the same device 而且 inode
numbers。
[ -o 选项名 ] 为真 如果 shell 选项 "选项名" 开启。
[ -z STRING ] 为真 如果 "STRING"的长度是零。
[ -n STRING ] 或者 [ STRING ] 为真 "STRING"的长度是非零值。
[ STRING1 == STRING2 ] 如果两个字符串相等为真。 "=" may be used instead of "==" for
strict POSIX compliance。
[ STRING1 != STRING2 ] 为真 如果 两两个字符串不相等。
[ STRING1 < STRING2 ] 为真 如果 "STRING1" sorts before "STRING2" lexicographically in the
current locale。
[ STRING1 > STRING2 ] 为真 如果 "STRING1" sorts after "STRING2" lexicographically in the
current locale。
[ ARG1 OP ARG2 ]
"OP" 是 -eq, -ne, -lt, -le, -gt or -ge 其中一个。 These arithmetic binary operators
return 为真 如果 "ARG1" is equal to, not equal to, less than, less than or equal to, greater
than, or greater than or equal to "ARG2", respectively。 "ARG1" 而且 "ARG2" are
integers。
表达式可以借以下操作符组合起来, listed in decreasing order of precedence:
操作符效果
[ ! EXPR ] 如果EXPR 为假则为真。
[ ( EXPR ) ] 返回EXPR 的值。 这样可以用来忽略正常的操作符优先级。
 

[ 表达式1 -a 表达式2 ] 如果表达式1 而且表达式2 同时为真则为真 。
[ 表达式1 -o 表达式2 ] 如果表达式1 或者表达式2 其中之一为真则为真。


Shell 里面的中括号（包括单中括号与双中括号）可用于一些条件的测试：
算术比较, 比如一个变量是否为0,      [ $var -eq 0 ]
文件属性测试，比如一个文件是否存在，[ -e $var ] 
                        是否是目录，[ -d $var ]
字符串比较, 比如两个字符串是否相同，[[ $var1 = $var2 ]]




python os.stat() 和 stat模块详解:https://www.cnblogs.com/maseng/p/3386140.html


敲一下w，即可看到当前在线人数

【cut】
cut命令可以从一个文本文件或者文本流中提取文本列。
cut语法
[root@www ~]# cut -d'分隔字符' -f fields <==用于有特定分隔字符
[root@www ~]# cut -c 字符区间            <==用于排列整齐的信息
选项与参数：
-d  ：后面接分隔字符。与 -f 一起使用；
-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；
-c  ：以字符 (characters) 的单位取出固定字符区间；

举个例子：
PATH 变量如下
[root@www ~]# echo $PATH
/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games
# 1 | 2       | 3   | 4       | 5            | 6            | 7
将 PATH 变量取出，我要找出第五个路径。
#echo $PATH | cut -d ':' -f 5
/usr/local/bin

read命令接收标准输入（键盘）的输入，或其他文件描述符的输入。
得到输入后，read命令将数据放入一个标准变量中。下面是 read命令的例子

#!/bin/bash
echo -n "Enter your name:"   //参数-n的作用是不换行，echo默认是换行
read  name                   //从键盘输入
echo "hello $name,welcome to my program"     //显示信息
exit 0                       //退出shell程序。


由于read命令提供了-p参数，允许在read命令行中直接指定一个提示。
所以上面的脚本可以简写成下面的脚本:
#!/bin/bash
read -p "Enter your name:" name
echo "hello $name, welcome to my program"
exit 0

在上面read后面的变量只有name一个，也可以有多个，这时如果输入多个数据，则第一个数据给第一个变量，第二个数据给第二个变量，
如果输入数据个数过多，则最后所有的值都给第一个变量。如果太少输入不会结束。






